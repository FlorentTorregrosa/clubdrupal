<?php
/**
 * @file
 * Add a new Price formatter that allow more options on how
 * to display prices. 
 */
 
/**
 * Implements hook_theme().
 */
function commerce_price_flexyformatter_theme() {
  return array(
    'commerce_price_flexyformatter_selected_amount' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_price_flexyformatter_field_formatter_info() {
  return array(
    'commerce_price_flexyformatter_selected_amount' => array(
      'label' => t('Formatted amount with selected components'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'base' => array('selection' => array('base_price' => 'base_price'), 'weight' => 0, 'calc' => 'default'),
        'reference1' => array('class' => '.flexy-striked', 'weight' => -10, 'calc' => 'default'),
        'reference2' => array('weight' => 10, 'calc' => 'default'),
        // need this to load all price components, hoping will not be changed
        'calculation' => 'calculated_sell_price',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_price_flexyformatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];

  $element = array();
  $defaults = array();
  $reference1_defaults = $reference2_defaults = array();
  $methods = array('default' => 'actual values',
                    'reference1' => 'calculated on reference1 selected components',
                    'reference2' => 'calculated on reference2 selected components');
  // Get all the price component types
  $options = commerce_price_component_titles();
  
  foreach ($settings['base']['selection'] as $key => $value) {
    if ($value != '0') { $defaults[] = $key; }
  }
  foreach ($settings['reference1']['selection'] as $key => $value) {
    if ($value != '0') { $reference1_defaults[] = $key; }
  }
  foreach ($settings['reference2']['selection'] as $key => $value) {
    if ($value != '0') { $reference2_defaults[] = $key; }
  }

  $element['base']['selection'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $defaults,
  );
  $element['base']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => $settings['base']['label'],
    '#size' => 20,
  );
  $element['base']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom class'),
    '#default_value' => $settings['base']['class'],
    '#size' => 20,
  );
  $element['base']['calc'] = array(
    '#type' => 'radios',
    '#options' => $methods,
    '#title' => t('Tax calculation method'),
    '#default_value' => $settings['base']['calc'],
  );
  $element['base']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => $settings['base']['weight'],
    '#size' => 6,
  );
  $element['reference1'] = array (
    '#type' => 'fieldset',
    '#title' => t('1st reference amount'),
    '#collapsible' => TRUE,
    '#collapsed' => ($settings['reference1']['enabled']? FALSE : TRUE),
  );
  $element['reference1']['enabled'] = array(
    '#title' => t('Enable'),
    '#type' => 'checkbox',
    '#default_value' => $settings['reference1']['enabled'],
  );
  $element['reference1']['selection'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $reference1_defaults,
  );
  $element['reference1']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => $settings['reference1']['label'],
    '#size' => 20,
  );
  $element['reference1']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom class'),
    '#default_value' => $settings['reference1']['class'],
    '#size' => 20,
  );
  $element['reference1']['calc'] = array(
    '#type' => 'radios',
    '#options' => $methods,
    '#title' => t('Tax calculation method'),
    '#default_value' => $settings['reference1']['calc'],
  );
  $element['reference1']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => $settings['reference1']['weight'],
    '#size' => 6,
  );
  $element['reference2'] = array (
    '#type' => 'fieldset',
    '#title' => t('2nd reference amount'),
    '#collapsible' => TRUE,
    '#collapsed' => ($settings['reference2']['enabled']? FALSE : TRUE),
  );
  $element['reference2']['enabled'] = array(
    '#title' => t('Enable'),
    '#type' => 'checkbox',
    '#default_value' => $settings['reference2']['enabled'],
  );
  $element['reference2']['selection'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $reference2_defaults,
  );
  $element['reference2']['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#default_value' => $settings['reference2']['label'],
    '#size' => 20,
  );
  $element['reference2']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom class'),
    '#default_value' => $settings['reference2']['class'],
    '#size' => 20,
  );
  $element['reference2']['calc'] = array(
    '#type' => 'radios',
    '#options' => $methods,
    '#title' => t('Tax calculation method'),
    '#default_value' => $settings['reference2']['calc'],
  );
  $element['reference2']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => $settings['reference2']['weight'],
    '#size' => 6,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_price_flexyformatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $types = commerce_price_component_titles();
  $methods = array('default' => 'actual values',
                    'reference1' => 'calculated on reference1 selected components',
                    'reference2' => 'calculated on reference2 selected components');
  $components['list'] = '';
  $components['count'] = 0;
  foreach($settings['base']['selection'] as $key => $value) {
    if ($value != '0') {
      $components['count']++;
      if ($components['count'] > 1) {$components['list'] .= ', ';}
      $components['list'] .= $types[$key];
    }
  }
  if ($components['count'] == 0) {
    $summary[] = t('No components selected');
  }
  else {
    $description = ($settings['base']['label']?$settings['base']['label'].' - selected ':'Selected ') .
                   format_plural($components['count'], 'component is !list', 'components are !list', array('!list' => $components['list'])) .
                   ' - ' . t('weight: ') . $settings['base']['weight'] . ' - ' . t('tax ') . $methods[$settings['base']['calc']] .'.';
    $summary[] = $description;
    if ($settings['reference1']['enabled']) {
      $reference['list'] = '';
      $reference['count'] = 0;
      foreach($settings['reference1']['selection'] as $key => $value) {
        if ($value != '0') {
          $reference['count']++;
          if ($reference['count'] > 1) {$reference['list'] .= ', ';}
          $reference['list'] .= $types[$key];
        }
      }
      $description = ($settings['reference1']['label']?$settings['reference1']['label'].' - selected ':'1st reference amount enabled with selected ') .
                     format_plural($reference['count'], 'component is !list', 'components are !list', array('!list' => $reference['list'])) .
                     ' - ' . t('weight: ') . $settings['reference1']['weight'] . ' - ' . t('tax ') . 
                     $methods[$settings['reference1']['calc']] .'.';
     $summary[] = $description;
    }
    else {
      $summary[] = t('1st reference amount not enabled.');
    }
    if ($settings['reference2']['enabled']) {
      $reference['list'] = '';
      $reference['count'] = 0;
      foreach($settings['reference2']['selection'] as $key => $value) {
        if ($value != '0') {
          $reference['count']++;
          if ($reference['count'] > 1) {$reference['list'] .= ', ';}
          $reference['list'] .= $types[$key];
        }
      }
      $description = ($settings['reference2']['label']?$settings['reference2']['label'].' - selected ':'2nd reference amount enabled with selected ') .
                     format_plural($reference['count'], 'component is !list', 'components are !list', array('!list' => $reference['list'])) .
                     ' - ' . t('weight: ') . $settings['reference2']['weight'] . ' - ' . t('tax ') . 
                     $methods[$settings['reference2']['calc']] .'.';
     $summary[] = $description;
    }
    else {
      $summary[] = t('2nd reference amount not enabled.');
    }
  }

  return implode('<br />', $summary);
}
/**
 * Implements hook_field_formatter_prepare_view().
 */
function commerce_price_flexyformatter_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // why I need to repeat all that ???

  // Allow other modules to prepare the item values prior to formatting.
  foreach(module_implements('commerce_price_field_formatter_prepare_view') as $module) {
    $function = $module . '_commerce_price_field_formatter_prepare_view';
    $function($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_price_flexyformatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {
    // Do not render a price if the amount is NULL (i.e. non-zero empty value).
    if (is_null($item['amount'])) {
      // TODO: Consider if we should render as N/A or something indicating a
      // price was not available as opposed to just leaving a blank.
      continue;
    }
    // Theme the display of the price based on the display type.
    switch ($display['type']) {

      case 'commerce_price_flexyformatter_selected_amount':
        // Build an array of component display titles and their prices.
        $tax_base = array('reference1' => 0, 'reference2' => 0);        
        $amount = $reference1_amount = $reference2_amount = 0;

        // calc tax base
        foreach ($item['data']['components'] as $key => $component) {
          if (!isset($component['price']['data']['tax_rate'])) {
           if (isset($display['settings']['reference1']['selection'][$component['name']]) 
             && $display['settings']['reference1']['selection'][$component['name']] != '0') {
              $tax_base['reference1'] += $component['price']['amount'];
           }
           if (isset($display['settings']['reference2']['selection'][$component['name']]) 
             && $display['settings']['reference2']['selection'][$component['name']] != '0') {
              $tax_base['reference2'] += $component['price']['amount'];
            }
          }
        }
        $amount = commerce_price_flexyformatter_amount_calc($item['data']['components'],$display['settings']['base'],$tax_base);
        if (isset($display['settings']['reference1']['enabled']) && $display['settings']['reference1']['enabled']) {
          $reference1_amount = commerce_price_flexyformatter_amount_calc($item['data']['components'],$display['settings']['reference1'],$tax_base);
        }
        if (isset($display['settings']['reference2']['enabled']) && $display['settings']['reference2']['enabled']) {
          $reference2_amount = commerce_price_flexyformatter_amount_calc($item['data']['components'],$display['settings']['reference2'],$tax_base);
        }

        $element[$delta] = array(
          '#markup' => theme('commerce_price_flexyformatter_selected_amount', 
            array(
              'base' => array(
                'amount' => $amount,
                'label' => (isset($display['settings']['base']['label'])?$display['settings']['base']['label']:null),
                'class' => (isset($display['settings']['base']['class'])?$display['settings']['base']['class']:null),
                'weight' => (isset($display['settings']['base']['weight'])?$display['settings']['base']['weight']:null),
              ),
              'reference1' => array(
                'amount' => (isset($reference1_amount)?$reference1_amount:null),
                'label' => (isset($display['settings']['reference1']['label'])?$display['settings']['reference1']['label']:null),
                'class' => (isset($display['settings']['reference1']['class'])?$display['settings']['reference1']['class']:null),
                'weight' => (isset($display['settings']['reference1']['weight'])?$display['settings']['reference1']['weight']:null),
                'enabled' => (isset($display['settings']['reference1']['enabled'])?$display['settings']['reference1']['enabled']:0),
              ),
              'reference2' => array(
                'amount' => (isset($reference2_amount)?$reference2_amount:null),
                'label' => (isset($display['settings']['reference2']['label'])?$display['settings']['reference2']['label']:null),
                'class' => (isset($display['settings']['reference2']['class'])?$display['settings']['reference2']['class']:null),
                'weight' => (isset($display['settings']['reference2']['weight'])?$display['settings']['reference2']['weight']:null),
                'enabled' => (isset($display['settings']['reference2']['enabled'])?$display['settings']['reference2']['enabled']:0),
              ),
              'currency_code' => $item['currency_code'],
            )
          ),
        );
      break;
    }
  }
  return $element;
}

/**
 * Themes flexyformatted price.
 *
 * @param $variables
 */
function theme_commerce_price_flexyformatter_selected_amount($variables) {
  $output = '';
  uasort($variables, 'drupal_sort_weight');
  drupal_add_css(drupal_get_path('module', 'commerce_price_flexyformatter') . '/commerce_price_flexyformatter.css');
  foreach ($variables as $key => $variable) {
   if (is_numeric($variable['weight']) && ($key == 'base' || $variable['enabled'])) {
    $output .= '<span class=flexy-item' . ($variable['class']?' ' . $variable['class']:'') . '><span class"flexy-title">' . $variable['label'] . '</span><span class="flexy-amount">' . commerce_currency_format($variable['amount'], $variables['currency_code']) . '</span></span> ';
   }
  }

  return $output; 
}
/**
 * Calculate amount to be displayed.
 *
 * @param array $components
 * @param array $settings
 * @param array $tax_base
 */

function commerce_price_flexyformatter_amount_calc($components,$settings,$tax_base) {
  $amount = 0;
  foreach ($components as $key => $component) {
    if (isset($settings['selection'][$component['name']]) && $settings['selection'][$component['name']] != '0') {
      if (!isset($component['price']['data']['tax_rate'])
        or (isset($settings['calc']) 
          and $settings['calc'] == 'default')) {
        $amount += $component['price']['amount'];
      } else {
        $amount += $component['price']['data']['tax_rate']['rate'] * $tax_base[$settings['calc']];
      }
    }
  }
  return $amount;
}
