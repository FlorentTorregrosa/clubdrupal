<?php

/**
 * @file
 * Hooks and field implementations
 */

// Define choice constants
define('MAKEMEETING_ANSWER_PERM', 'answer makemeeting form');
define('MAKEMEETING_EDIT_PERM', 'edit any makemeeting answer');
define('MAKEMEETING_DELETE_PERM', 'delete any makemeeting answer');
define('MAKEMEETING_NO', 0);
define('MAKEMEETING_YES', 1);
define('MAKEMEETING_MAYBE', 2);

/**
 * Include required files.
 */
include_once 'makemeeting.field.inc';

/**
 * Implements hook_permission().
 */
function makemeeting_permission() {
  return array(
    MAKEMEETING_ANSWER_PERM => array(
      'title' => t('Provide an answer to makemeeting forms'),
      'description' => t('Give the ability to make a choice in makemeeting answer forms.'),
    ),
    MAKEMEETING_EDIT_PERM => array(
      'title' => t('Edit any makemeeting answers'),
      'description' => t('Edit answers given by other users.'),
    ),
    MAKEMEETING_DELETE_PERM => array(
      'title' => t('Delete any makemeeting answers'),
      'description' => t('Delete answers given by other users.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function makemeeting_menu() {
  $items['makemeeting/delete-answer/%makemeeting_answer'] = array(
    'title' => 'Remove an answer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('makemeeting_delete_answer', 2),
    'access callback' => 'makemeeting_delete_answer_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['makemeeting/edit-answer/%makemeeting_answer'] = array(
    'title' => 'Edit an answer',
    'page callback' => 'makemeeting_edit_answer',
    'page arguments' => array(2),
    'access callback' => 'makemeeting_edit_answer_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Load an answer
 *
 * @param $answer_id
 * @return mixed
 */
function makemeeting_answer_load($answer_id) {
  $answer = db_select('makemeeting_answers', 'm')
            ->fields('m')
            ->condition('answer_id', $answer_id)
            ->execute()
            ->fetchAssoc();
  $answer['value'] = unserialize($answer['value']);
  return $answer ? (object) $answer : FALSE;
}

/**
 * Access callback: delete an answer
 *
 * @param $answer
 * @return bool
 */
function makemeeting_delete_answer_access($answer) {
  global $user;
  return user_access(MAKEMEETING_DELETE_PERM) || (user_is_logged_in() && $answer->uid == $user->uid);
}

/**
 * Access callback: edit an answer
 *
 * @param $answer
 * @return bool
 */
function makemeeting_edit_answer_access($answer) {
  global $user;
  return user_access(MAKEMEETING_EDIT_PERM) || (user_is_logged_in() && $answer->uid == $user->uid);
}

/**
 * Menu callback: delete an answer
 *
 * @param $form
 * @param $form_state
 * @param $answer
 * @param bool $redirect
 * @return
 */
function makemeeting_delete_answer($form, &$form_state, $answer, $redirect = TRUE) {
  $form['#answer'] = $answer;
  return confirm_form(
    $form,
    t('Are you sure you want to delete the answer?'),
    ''
  );
}

/**
 * Form callback: confirm answer deletion
 */
function makemeeting_delete_answer_submit($form, &$form_state) {
  $answer = $form['#answer'];
  db_delete('makemeeting_answers')
  ->condition('answer_id', $answer->answer_id)
  ->execute();

  _makemeeting_clear_related_entity_cache($answer->entity_type, $answer->entity_id);
}

/**
 * Menu callback: edit an answer
 *
 * @param object $answer
 *  The loaded answer
 * @param string $type
 *  Ajax or nojs
 * @return array|void
 *  The entire form or just the row depending on ajax
 */
function makemeeting_edit_answer($answer, $type = 'ajax') {
  $entities = entity_load($answer->entity_type, array($answer->entity_id));
  if (empty($entities)) {
    return drupal_not_found();
  }
  $entity = $entities[$answer->entity_id];
  $field = $entity->{$answer->field_name}[$answer->language][$answer->delta];
  $form = drupal_get_form('makemeeting_answers_form_' . $answer->entity_id, $field, (array) $answer, $answer);
  if ($type == 'ajax') {
    $form['#theme'] = 'makemeeting_answer_row';
    // Replace 'ajax' word in form action
    $form['#action'] = str_replace('/ajax/', '/nojs/', $form['#action']);
    $colspan = 1 + count(element_children($form['answers']));
    $output = '<tr class="editing"><td colspan="' . $colspan . '">' . drupal_render($form) . '</td></tr>';
    $commands = array();
    // See ajax_example_advanced.inc for more details on the available commands
    // and how to use them.
    $commands[] = ajax_command_replace('#answer-' . $answer->answer_id, $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    return ajax_deliver($page);
  }
  return $form;
}


/**
 * Ajax callback in response to an answer that has been edited.
 *
 * This returns the new form content to replace the form content made obsolete
 * by the form submission.
 */
function makemeeting_answer_js($form, $form_state) {
  $values = $form_state['values'];
  $answer = $values['answer_edited'];
  $entities = entity_load($answer->entity_type, array($answer->entity_id));
  if (empty($entities)) {
    return drupal_not_found();
  }
  $entity = $entities[$answer->entity_id];
  $field = $entity->{$answer->field_name}[$answer->language][$answer->delta];
  // We need to empty POST data to prevent the form
  // from being processed as submitted
  $_POST = array();
  $new_form = drupal_get_form('makemeeting_answers_form_' . $answer->entity_id, $field, $values);
  // AJaX processing overrides form action, now retrieving the correct one
  $query = parse_url($form['#action']);
  $parameters = drupal_get_query_array($query['query']);
  $new_form['#action'] = $parameters['destination'];
  return $new_form;
}

/**
 * Implements hook_forms().
 */
function makemeeting_forms($form_id) {
  $forms = array();
  if (preg_match('/^makemeeting_answers_form_\d+?$/', $form_id)) {
    $forms = array(
      $form_id => array(
        'callback' => 'makemeeting_answers_form',
      )
    );
  }
  return $forms;
}

/**
 * Form callback: enables users to answer a makemeeting poll
 */
function makemeeting_answers_form($form, &$form_state, $item, $instance, $answer = NULL) {
  global $user;
  $form = array();
  $form['#item'] = $item;
  $form['#theme'] = 'makemeeting_answers';

  // Force the id of the form as it might get overriden in AJAX-loaded forms
  $form['#id'] = 'makemeeting-answers-form';

  // Pass entity-related values in the form
  foreach (array('field_name', 'entity_type', 'deleted', 'entity_id',
             'language', 'delta') as $info) {
    $form[$info] = array(
      '#type' => 'value',
      '#value' => $instance[$info],
    );
  }

  // Pass answer being edited
  if ($answer) {
    $form['answer_edited'] = array(
      '#type' => 'value',
      '#value' => $answer,
    );
  }
  // Include current destination for ajax calls
  if (!isset($form_state['ajax_destination'])) {
    $form_state['ajax_destination'] = drupal_get_destination();
  }

  // Include the name of the current user
  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => 22,
  );
  if (!user_is_logged_in()) {
    // This is an HTML5 attribute
    $form['name']['#attributes'] = array('placeholder' => t('Your name (required)'));
    $form['name']['#required'] = TRUE;
  }
  else {
    $form['name']['#default_value'] = format_username($user);
    $form['name']['#disabled'] = TRUE;
  }
  if (!empty($answer)) {
    if ($answer->uid > 0) {
      $account = user_load($answer->uid);
      $form['name']['#default_value'] = format_username($account);
    }
    else {
      $form['name']['#default_value'] = $answer->name;
    }
  }

  // If the form is limited, fetch already submitted answers
  $answers = array();
  if ($item['limit'] > 0) {
    $select = db_select('makemeeting_answers', 'ma')
              ->fields('ma', array('value'));
    foreach (array('field_name', 'entity_type', 'deleted', 'entity_id', 'language', 'delta') as $info) {
      $select->condition($info, $instance[$info]);
    }
    // Filter out answer being edited
    if ($answer) {
      $select->condition('answer_id', $answer->answer_id, '!=');
    }
    $results = $select->execute();
    // And add each answer to our results array for futher use
    foreach ($results as $result) {
      $_answer = unserialize($result->value);
      if (is_array($_answer)) {
        foreach ($_answer as $key => $value) {
          if ($value) {
            $answers[$key] = empty($answers[$key]) ? 1 : $answers[$key] + 1;
          }
        }
      }
      elseif (is_string($_answer) && $_answer) {
        $answers[$_answer] = empty($answers[$_answer]) ? 1 : $answers[$_answer] + 1;
      }
    }
  }

  // Possible answers
  $form['answers'] = array();
  foreach ($item['choices'] as $choice) {
    $chdate = _makemeeting_date_timestamp($choice['chdate']);
    $count = 0;
    foreach ($choice['chsuggestions'] as $id => $text) {
      // Add a form element only if there's a suggestion label
      // or it is the first suggestion for this date
      if ($text || (!$text && !$count)) {
        _makemeeting_answer_element($form, $item, $id, $chdate, $text, $answers, $answer);
      }
      $count++;
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  if (!empty($answer)) {
    // Modify form submit to include ajax behavior
    $form['submit']['#ajax'] = array(
      'callback' => 'makemeeting_answer_js',
      'wrapper' => 'makemeeting-answers-form',
      'effect' => 'fade',
    );
  }

  return $form;
}

/**
 * Form validate: validate answers
 */
function makemeeting_answers_form_validate($form, &$form_state) {
  // The required attribute won't work, so we display a single message
  if (!$form_state['values']['name']) {
    drupal_set_message(t('You must enter your name.'), 'error');
  }
  // Check is the user has already voted
  if (user_is_logged_in() && empty($form_state['values']['answer_edited'])) {
    global $user;
    $select = db_select('makemeeting_answers', 'ma');
    foreach (array('field_name', 'entity_type', 'deleted', 'entity_id',
               'language', 'delta') as $info) {
      $select->condition($info, $form_state['values'][$info]);
    }
    $result = $select->condition('uid', $user->uid)
                     ->countQuery()
                     ->execute()
                     ->fetchField();
    if ($result) {
      form_error($form, t('You already voted on this poll.'));
    }
  }
}

/**
 * Form submit: store answers
 */
function makemeeting_answers_form_submit($form, $form_state) {
  global $user;
  if (!empty($form_state['values']['answer_edited'])) {
    db_update('makemeeting_answers')
    ->fields(array(
      'name' => $form_state['values']['name'],
      'value' => serialize($form_state['values']['answers']),
    ))
    ->condition('answer_id', $form_state['values']['answer_edited']->answer_id)
    ->execute();
  }
  else {
    $fields = array();
    foreach (array('field_name', 'entity_type', 'deleted', 'entity_id',
               'language', 'delta', 'name') as $field) {
      $fields[$field] = $form_state['values'][$field];
    }
    db_insert('makemeeting_answers')
    ->fields($fields + array(
        'value' => serialize($form_state['values']['answers']),
        'uid'   => $user->uid,
      ))
    ->execute();
  }

  // Spoof drupal_get_destination()'s cache for ajax calls
  if (current_path() === 'system/ajax') {
    $destination = &drupal_static('drupal_get_destination');
    $destination = $form_state['ajax_destination'];
  }

  _makemeeting_clear_related_entity_cache($form_state['values']['entity_type'], $form_state['values']['entity_id']);
}

/**
 * Implements hook_theme().
 */
function makemeeting_theme($existing, $type, $theme, $path) {
  return array(
    'makemeeting_choices' => array(
      'render element' => 'form',
      'file' => 'makemeeting.theme.inc',
    ),
    'makemeeting_answers' => array(
      'render element' => 'form',
      'file' => 'makemeeting.theme.inc',
    ),
    'makemeeting_answer_row' => array(
      'render element' => 'form',
      'file' => 'makemeeting.theme.inc',
    ),
  );
}


/**
 * Helper function to convert date field value into an Unix timestamp
 *
 * @param $array array Date field value (month, day and year)
 * @return int Unix timestamp
 */
function _makemeeting_date_timestamp($array) {
  $date_str = "{$array['day']}-{$array['month']}-{$array['year']}";
  $date = new DateTime($date_str);
  return $date->getTimestamp();
}

/**
 * Helper function for selecting choices
 *
 * @param bool $three_choices If should be returning three choices
 * @return array An array of options for radios
 */
function _makemeeting_options($three_choices = FALSE) {
  $options = array(
    MAKEMEETING_NO => t('No'),
    MAKEMEETING_MAYBE => t('Maybe'),
    MAKEMEETING_YES => t('Yes'),
  );
  if (!$three_choices) {
    unset($options[MAKEMEETING_MAYBE]);
  }
  return $options;
}

/**
 * Helper function to provide an answer form element
 *
 * @param $form
 *  Form to be modified
 * @param $item
 *  Item providing settings for the answer form
 * @param $id
 *  Suggestion id
 * @param $chdate
 *  Suggestion date
 * @param $text
 *  Suggestion text
 * @param array $answers
 *  Already submitted answers
 * @param null $answer
 *  Answer being edited
 */
function _makemeeting_answer_element(&$form, $item, $id, $chdate, $text, $answers = array(), $answer = NULL) {
  $key = $chdate . ':' . $id;
  // If the limit is reached for this option, display a markup text
  if ($item['limit'] > 0 && isset($answers[$key]) && $answers[$key] >= $item['limit']) {
    $form['answers'][$key] = array(
      '#markup' => t('Unavailable'),
    );
  }
  // Else add a form element
  else {
    $title = format_date($chdate, 'custom', 'l j F Y') . ' ' . $text;
    $form['answers'][$key] = array(
      '#type' => $item['one_option'] ? 'radio' : ($item['yesnomaybe'] ? 'radios' : 'checkbox'),
      '#attributes' => array('title' => check_plain($title)),
      '#parents' => array('answers', $key),
    );

    if ($item['one_option']) {
      $form['answers'][$key]['#parents'] = array('answers');
      $form['answers'][$key]['#return_value'] = $key;
    }
    else {
      $form['answers'][$key]['#options'] = _makemeeting_options($item['yesnomaybe']);
    }
    if ($item['yesnomaybe']) {
      $form['answers'][$key]['#default_value'] = MAKEMEETING_NO;
    }
    // Display previous choice if answer is being edited
    if ($answer && !empty($answer->value[$key])) {
      $form['answers'][$key]['#default_value'] = $answer->value[$key];
    }
  }
}

/**
 * Invalidate related entity caches.
 *
 * Clear the core page cache and the contrib Entity Cache of the entity.
 *
 * @param $entity_type
 * @param $entity_id
 */
function _makemeeting_clear_related_entity_cache($entity_type, $entity_id) {
  // Clear entity_type cache.
  entity_get_controller($entity_type)->resetCache();

  // Clear core page cache.
  if (variable_get('cache', FALSE)) {
    $entities = entity_load($entity_type, array($entity_id));
    $entity = reset($entities);

    global $base_root;
    $uri = entity_uri($entity_type, $entity);
    // Clear the non-aliased page.
    cache_clear_all($base_root . base_path() . $uri['path'], 'cache_page');
    // Clear the aliased page.
    cache_clear_all(url($uri['path'], array('absolute'=>TRUE)), 'cache_page');
  }

  // Clear referencing entities cache.
  if (module_exists('entityreference')) {
    _makemeeting_clear_referencing_entity_cache($entity_type, $entity_id);
  }
}

/**
 * Invalidate referencing entities caches.
 *
 * Recursive function clearing the cache for all the entities that references
 * the given one using the entityreference module.
 *
 * @param $entity_type
 * @param $entity_id
 */
function _makemeeting_clear_referencing_entity_cache($entity_type, $entity_id) {
  $cleared = &drupal_static(__FUNCTION__, array());
  // Avoid the cache to be cleared twice for the same entity.
  if (!empty($cleared[$entity_type][$entity_id])) {
    return;
  }
  $cleared[$entity_type][$entity_id] = TRUE;

  // Get the entity bundle to retreive the field that can reference this kind
  // of entities.
  $entity = entity_load_single($entity_type, $entity_id);
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $fields_referencing = _makemeeting_clear_referencing_fields($entity_type, $bundle);

  // For each referencing field, get the entities that references the current
  // entity using the field and clear their cache.
  foreach ($fields_referencing as $field_name) {
    $query = new EntityFieldQuery();
    $query->fieldCondition($field_name, 'target_id', $entity_id);
    foreach ($query->execute() as $referent_entity_type => $referent_entities) {
      foreach ($referent_entities as $referent_entity_id => $referent_entity) {
        _makemeeting_clear_related_entity_cache($referent_entity_type, $referent_entity_id);
      }
    }
  }
}

/**
 * Get all fields referencing a given bundle.
 *
 * @param $entity_type
 *   The entity type of the bundle.
 * @param $bundle
 *   The referenced bundle.
 * @return array
 *   An array of field names being able to reference the given bundle.
 */
function _makemeeting_clear_referencing_fields($entity_type, $bundle) {
  $static = &drupal_static(__FUNCTION__, array());
  // Use a static temporary cache to avoid using too mush resources.
  if (array_key_exists($entity_type, $static) && array_key_exists($bundle, $static[$entity_type])) {
    return $static[$entity_type][$bundle];
  }

  $fields = field_info_fields();
  $static[$entity_type][$bundle] = array();
  foreach ($fields as $field_name => $field) {
    // Check if the field is an entityreference field.
    if ($field['type'] != 'entityreference') {
      continue;
    }
    // Check if the entity_type match the target_type of the field.
    if ($field['settings']['target_type'] != $entity_type) {
      continue;
    }
    // If the field is using the base handler check if the bundle is allowed.
    if ($field['settings']['handler'] == 'base' && !in_array($bundle, $field['settings']['handler_settings']['target_bundles'])) {
      continue;
    }
    $static[$entity_type][$bundle][] = $field_name;
  }

  return $static[$entity_type][$bundle];
}

/**
 * Implements hook_field_views_data_alter().
 */
function makemeeting_field_views_data_alter(&$result, $field, $module) {
  if ($module == 'makemeeting') {
    foreach ($result as $table => $data) {
      $field_name = $field['field_name'];

      // We will replace the filter handlers with a friendlier one.
      $result[$table][$field_name . '_closed']['filter']['handler'] = 'views_handler_filter_boolean_operator';
      $result[$table][$field_name . '_hidden']['filter']['handler'] = 'views_handler_filter_boolean_operator';
      $result[$table][$field_name . '_one_option']['filter']['handler'] = 'views_handler_filter_boolean_operator';
      $result[$table][$field_name . '_yesnomaybe']['filter']['handler'] = 'views_handler_filter_boolean_operator';
    }
  }
}
